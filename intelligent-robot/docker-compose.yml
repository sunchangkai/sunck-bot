version: "3"
services:
  bot-web:
    container_name: bot-web
    ports:
      - "8080:8080"
    build:
      context: ./
      dockerfile: ./docker_env/web/Dockerfile
    environment:
      TZ: Asia/Shanghai
    volumes:
      - ./docker_env/nginx/my.conf:/etc/nginx/conf.d/my.conf
      - ./backend/media:/backend/media
    expose:
      - "8080"
    restart: always
    networks:
      network:
        ipv4_address: 177.10.0.11

  bot-django:
    build:
      context: .
      dockerfile: ./docker_env/django/Dockerfile
    container_name: bot-django
    working_dir: /backend
    depends_on:
      - bot-mysql
    environment:
      PYTHONUNBUFFERED: 1
      DATABASE_HOST: bot-mysql
      TZ: Asia/Shanghai
    volumes:
      - ./backend:/backend
      - ./logs/log:/var/log
    ports:
      - "8000:8000"
    expose:
      - "8000"
    restart: always
    networks:
      network:
        ipv4_address: 177.10.0.12

  # dvadmin3-mysql:
  #   image: mysql:8.0
  #   container_name: dvadmin3-mysql
  #   privileged: true
  #   restart: always
  #   ports:
  #     - "3306:3306"
  #   environment:
  #     MYSQL_ROOT_PASSWORD: ${MYSQL_PASSWORD}
  #     MYSQL_DATABASE: "django-vue3-admin"
  #     TZ: Asia/Shanghai
  #   command:
  #     --wait_timeout=31536000
  #     --interactive_timeout=31536000
  #     --max_connections=1000
  #     --default-authentication-plugin=mysql_native_password
  #   volumes:
  #     - "./docker_env/mysql/data:/var/lib/mysql"
  #     - "./docker_env/mysql/conf.d:/etc/mysql/conf.d"
  #     - "./docker_env/mysql/logs:/logs"
  #   networks:
  #     network:
  #       ipv4_address: 177.10.0.13


  # bot-celery:
  #   build:
  #     context: .
  #     dockerfile: ./docker_env/celery/Dockerfile
  #   container_name: bot-celery
  #   working_dir: /backend
  #   depends_on:
  #     - bot-mysql
  #   environment:
  #     PYTHONUNBUFFERED: 1
  #     DATABASE_HOST: bot-mysql
  #     TZ: Asia/Shanghai
  #   volumes:
  #     - ./backend:/backend
  #     - ./logs/log:/var/log
  #   restart: always
  #   networks:
  #     network:
  #       ipv4_address: 177.10.0.14


  bot-redis:
    build:
      context: .
      dockerfile: ./docker_env/redis/Dockerfile
    container_name: bot-redis
    restart: on-failure
    environment:
     - TZ=Asia/Shanghai 
    ports:
     - "6379:6379"
    sysctls:
     - net.core.somaxconn=1024
    # command: /bin/sh -c "echo 'vm.overcommit_memory = 1' >> /etc/sysctl.conf && redis-server /etc/redis/redis.conf --appendonly yes --requirepass ${REDIS_PASSWORD}"
    command: /bin/sh -c "echo 'vm.overcommit_memory = 1' >> /etc/sysctl.conf && redis-server /etc/redis/redis.conf --appendonly yes" # Specify a configuration file and enable persistence
    privileged: true
    networks:
     network:
       ipv4_address: 177.10.0.15


networks:
  network:
    ipam:
      driver: default
      config:
        - subnet: '177.10.0.0/16'

